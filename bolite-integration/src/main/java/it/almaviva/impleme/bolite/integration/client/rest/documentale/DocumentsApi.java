/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.7).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package it.almaviva.impleme.bolite.integration.client.rest.documentale;


import io.swagger.annotations.*;
import it.almaviva.impleme.bolite.integration.model.documentale.BaseDocument;
import it.almaviva.impleme.bolite.integration.model.documentale.Document;
import it.almaviva.impleme.bolite.integration.model.documentale.ResultDocument;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-08-09T11:41:08.520+02:00")

@Api(value = "Documents", description = "the Documents API")
public interface DocumentsApi {

    @ApiOperation(value = "restituisce la lista dei documenti che soddisfano il filtro dato.", nickname = "documentsGet", notes = "I parametri aggiuntivi ```limit``` e ```offset``` sono utili per la paginazione.", response = ResultDocument.class, responseContainer = "List", tags={ "documents", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ResultDocument.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/documents",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<List<ResultDocument>> documentsGet(@ApiParam(value = "E’ un oggetto in formato json che ha il seguente formato: ```   {      nome_campo_1: criterio,      ...      nome_campo_N: criterio   } ``` Deve contenere per ogni campo filtrato un oggetto JSON \"criterio\" Non deve contenere attributi diversi dai nomi dei campi filtrati Ogni criterio ha il formato: ```{operatore: valore}``` dove � un operatore unario tra i seguenti:   * ```eq``` (equals)   * ```ne``` (not equals)   * ```lt``` (less than)   * ```lte``` (less that or equals)   * ```gt``` (greater than)   * ```gte``` (greater than or equals)   * ```regex``` (regular expression) ") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "numero massimo di documenti da restituire", defaultValue = "10") @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit,@ApiParam(value = "numero di documenti da saltare", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "stringa da cercare nel documento") @Valid @RequestParam(value = "ft", required = false) String ft);


    @ApiOperation(value = "restituisce il file del documento", nickname = "documentsIdFileContentGet", notes = "", response = byte[].class, tags={ "documents", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = byte[].class),
        @ApiResponse(code = 404, message = "Documento non trovato"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/documents/{id_file}/content",
        method = RequestMethod.GET)
    ResponseEntity<byte[]> documentsIdFileContentGet(@ApiParam(value = "identificativo univoco del documento. Tipicamente � in formato UUIDv4",required=true) @PathVariable("id_file") String idFile,@ApiParam(value = "versione del documento, se non specificata � l'ultima") @Valid @RequestParam(value = "version", required = false) Integer version);


    @ApiOperation(value = "cancella un documento", nickname = "documentsIdFileDelete", notes = "", tags={ "documents", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 404, message = "Documento non trovato"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/documents/{id_file}",
        produces = "application/json", 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> documentsIdFileDelete(@ApiParam(value = "identificativo univoco del documento. Tipicamente � in formato UUIDv4",required=true) @PathVariable("id_file") String idFile);


    @ApiOperation(value = "restituisce il documento", nickname = "documentsIdFileGet", notes = "", response = ResultDocument.class, tags={ "documents", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ResultDocument.class),
        @ApiResponse(code = 404, message = "Documento non trovato"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/documents/{id_file}",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<ResultDocument> documentsIdFileGet(@ApiParam(value = "identificativo univoco del documento. Tipicamente � in formato UUIDv4",required=true) @PathVariable("id_file") String idFile,@ApiParam(value = "versione del documento, se non specificata � l'ultima") @Valid @RequestParam(value = "version", required = false) Integer version);


    @ApiOperation(value = "aggiorna i metadati di un documento e crea una nuova versione. Gli attributi calcolati dal sistema sono ignorati se presenti nel body.", nickname = "documentsIdFilePut", notes = "", response = Document.class, tags={ "documents", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "la nuova versione del documento", response = Document.class),
        @ApiResponse(code = 404, message = "Documento non trovato"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/documents/{id_file}",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<Document> documentsIdFilePut(@ApiParam(value = "identificativo univoco del documento. Tipicamente in formato UUIDv4",required=true) @PathVariable("id_file") String idFile,@ApiParam(value = "gli attributi ```id```, ```ft```, ```version```, ```created_at```, ```updated_at``` sono ignorati in quanto generati automaticamente dal sistema." ,required=true )  @Valid @RequestBody BaseDocument document);


    @ApiOperation(value = "crea un nuovo documento", nickname = "documentsPost", notes = "", response = ResultDocument.class, tags={ "documents", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "il nuovo documento", response = ResultDocument.class),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/documents",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<ResultDocument> documentsPost(@ApiParam(value = "gli attributi calcolati automaticamente dal sistema sono ignorati. Sono obbligatori ```filename```, ```readgroups``` e ```writegroups```" ,required=true )  @Valid @RequestBody Document document);

}
